// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer/resources.proto

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// APIResource represents an API resource in the peer whose ACL is determined by the policy_ref field
type APIResource struct {
	PolicyRef string `protobuf:"bytes,1,opt,name=policy_ref,json=policyRef" json:"policy_ref,omitempty"`
}

func (m *APIResource) Reset()                    { *m = APIResource{} }
func (m *APIResource) String() string            { return proto.CompactTextString(m) }
func (*APIResource) ProtoMessage()               {}
func (*APIResource) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *APIResource) GetPolicyRef() string {
	if m != nil {
		return m.PolicyRef
	}
	return ""
}

// ChaincodeIdentifier identifies a piece of chaincode.  For a peer to accept invocations of
// this chaincode, the hash of the installed code must match, as must the version string
// included with the install command.
type ChaincodeIdentifier struct {
	Hash    []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *ChaincodeIdentifier) Reset()                    { *m = ChaincodeIdentifier{} }
func (m *ChaincodeIdentifier) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeIdentifier) ProtoMessage()               {}
func (*ChaincodeIdentifier) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *ChaincodeIdentifier) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ChaincodeIdentifier) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// ChaincodeValidation instructs the peer how transactions for this chaincode should be
// validated.  The only validation mechanism which ships with fabric today is the standard
// 'vscc' validation mechanism.  This built in validation method utilizes an endorsement policy
// which checks that a sufficient number of signatures have been included.  The 'arguement'
// field encodes any parameters required by the validation implementation.
type ChaincodeValidation struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Argument []byte `protobuf:"bytes,2,opt,name=argument,proto3" json:"argument,omitempty"`
}

func (m *ChaincodeValidation) Reset()                    { *m = ChaincodeValidation{} }
func (m *ChaincodeValidation) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeValidation) ProtoMessage()               {}
func (*ChaincodeValidation) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *ChaincodeValidation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChaincodeValidation) GetArgument() []byte {
	if m != nil {
		return m.Argument
	}
	return nil
}

// VSCCArgs is passed (marshaled) as a parameter to the VSCC imlementation via the
// argument field of the ChaincodeValidation message.
type VSCCArgs struct {
	EndorsementPolicyRef string `protobuf:"bytes,1,opt,name=endorsement_policy_ref,json=endorsementPolicyRef" json:"endorsement_policy_ref,omitempty"`
}

func (m *VSCCArgs) Reset()                    { *m = VSCCArgs{} }
func (m *VSCCArgs) String() string            { return proto.CompactTextString(m) }
func (*VSCCArgs) ProtoMessage()               {}
func (*VSCCArgs) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

func (m *VSCCArgs) GetEndorsementPolicyRef() string {
	if m != nil {
		return m.EndorsementPolicyRef
	}
	return ""
}

// ChaincodeEndorsement instructs the peer how transactions should be endorsed.  The only
// endorsement mechanism which ships with the fabric today is the standard 'escc' mechanism.
// This code simply simulates the proposal to generate a RW set, then signs the result
// using the peer's local signing identity.
type ChaincodeEndorsement struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ChaincodeEndorsement) Reset()                    { *m = ChaincodeEndorsement{} }
func (m *ChaincodeEndorsement) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeEndorsement) ProtoMessage()               {}
func (*ChaincodeEndorsement) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4} }

func (m *ChaincodeEndorsement) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*APIResource)(nil), "protos.APIResource")
	proto.RegisterType((*ChaincodeIdentifier)(nil), "protos.ChaincodeIdentifier")
	proto.RegisterType((*ChaincodeValidation)(nil), "protos.ChaincodeValidation")
	proto.RegisterType((*VSCCArgs)(nil), "protos.VSCCArgs")
	proto.RegisterType((*ChaincodeEndorsement)(nil), "protos.ChaincodeEndorsement")
}

func init() { proto.RegisterFile("peer/resources.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xa9, 0x88, 0xb6, 0x63, 0x4f, 0x6b, 0x90, 0x20, 0x08, 0x92, 0x93, 0x8a, 0x24, 0x07,
	0xfd, 0x01, 0xd6, 0xd0, 0x43, 0x4f, 0x96, 0x08, 0x3d, 0x78, 0x29, 0x9b, 0x64, 0x92, 0x2c, 0x24,
	0x3b, 0x61, 0x36, 0x11, 0xfa, 0xef, 0x25, 0xbb, 0x35, 0x06, 0xec, 0x69, 0x67, 0xf6, 0x7d, 0xbc,
	0x9d, 0x79, 0x0b, 0x5e, 0x8b, 0xc8, 0x11, 0xa3, 0xa1, 0x9e, 0x33, 0x34, 0x61, 0xcb, 0xd4, 0x91,
	0xb8, 0xb0, 0x87, 0x09, 0x9e, 0xe1, 0x6a, 0xb5, 0xdd, 0x24, 0x47, 0x55, 0xdc, 0x01, 0xb4, 0x54,
	0xab, 0xec, 0xb0, 0x67, 0x2c, 0xfc, 0xd9, 0xfd, 0xec, 0x61, 0x91, 0x2c, 0xdc, 0x4d, 0x82, 0x45,
	0x10, 0xc3, 0x75, 0x5c, 0x49, 0xa5, 0x33, 0xca, 0x71, 0x93, 0xa3, 0xee, 0x54, 0xa1, 0x90, 0x85,
	0x80, 0xf3, 0x4a, 0x9a, 0xca, 0xf2, 0xcb, 0xc4, 0xd6, 0xc2, 0x87, 0xcb, 0x6f, 0x64, 0xa3, 0x48,
	0xfb, 0x67, 0xd6, 0xe6, 0xb7, 0x0d, 0xd6, 0x13, 0x93, 0x9d, 0xac, 0x55, 0x2e, 0x3b, 0x45, 0x7a,
	0x30, 0xd1, 0xb2, 0xc1, 0xe3, 0xa3, 0xb6, 0x16, 0xb7, 0x30, 0x97, 0x5c, 0xf6, 0x0d, 0xea, 0xce,
	0xba, 0x2c, 0x93, 0xb1, 0x0f, 0xde, 0x60, 0xbe, 0xfb, 0x8c, 0xe3, 0x15, 0x97, 0x46, 0xbc, 0xc2,
	0x0d, 0xea, 0x9c, 0xd8, 0xe0, 0x20, 0xed, 0xff, 0xad, 0xe0, 0x4d, 0xd4, 0xed, 0xb8, 0xcd, 0x13,
	0x78, 0xe3, 0x20, 0xeb, 0x3f, 0xe0, 0xd4, 0x24, 0xef, 0x1f, 0x10, 0x10, 0x97, 0x61, 0x75, 0x68,
	0x91, 0x6b, 0xcc, 0x4b, 0xe4, 0xb0, 0x90, 0x29, 0xab, 0xcc, 0xe5, 0x69, 0xc2, 0x21, 0xe5, 0xaf,
	0xc7, 0x52, 0x75, 0x55, 0x9f, 0x86, 0x19, 0x35, 0xd1, 0x04, 0x8d, 0x1c, 0x1a, 0x39, 0x34, 0x1a,
	0xd0, 0xd4, 0x7d, 0xc0, 0xcb, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x56, 0x6e, 0xf4, 0x9f,
	0x01, 0x00, 0x00,
}
